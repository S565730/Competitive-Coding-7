##problem 1
class Solution {

    public int minMeetingRooms(int[][] intervals) {

        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);

        PriorityQueue<Integer> pq = new PriorityQueue<>();

        for(int [] interval : intervals){

            if(pq.size() > 0 && pq.peek() <= interval[0]){

                pq.poll();

            }

            pq.add(interval[1]);

        }

        return pq.size();

    }

}

##problem 2
class Solution {

    public int kthSmallest(int[][] matrix, int k) {
   
        int n = matrix.length;
   
        int left = matrix[0][0];
   
        int right = matrix[n-1][n-1];
   
        while(left<right)
   
        {
   
            int mid = left + (right-left)/2;
   
            int count= getCount(matrix,mid);
   
            if(count<k)left=mid+1;
   
            else right=mid;
   
        }
   
        return left;
   
    }
   
    public int getCount(int[][] matrix, int mid){
   
        int count=0;
   
        int j=matrix.length-1;
   
        for(int i=0;i<matrix.length;i++)
   
        {
   
            while(j>=0 && matrix[i][j]>mid)j--;
   
            count+=j+1;
   
        }
   
        return count;
   
    }
   
   }
   
   